{"version":3,"file":"/packages/richsilv:cordova-notifications.js","sources":["richsilv:cordova-notifications/cordova-both.js"],"names":[],"mappings":";;;;;;;;AAAA,a;;AAEA,uB;;AAEA,4C;;AAEA,yE;AACA,iI;AACA,S;;AAEA,0B;;AAEA,uE;AACA,4D;AACA,U;;AAEA,gE;AACA,sC;AACA,U;;AAEA,iG;AACA,sC;AACA,2C;AACA,6C;AACA,oC;AACA,0C;AACA,iC;AACA,kB;AACA,oB;AACA,qD;AACA,2D;AACA,iD;AACA,6C;AACA,wC;AACA,sB;AACA,kB;AACA,a;AACA,U;;AAEA,gF;AACA,6C;AACA,gC;AACA,4G;AACA,iB;AACA,iD;AACA,2E;AACA,a;AACA,S;;AAEA,qC;;AAEA,gC;AACA,kE;AACA,4F;AACA,gE;AACA,0D;AACA,uB;AACA,wB;AACA,0D;AACA,iB;AACA,yB;AACA,a;AACA,W;;AAEA,uB;;AAEA,K;;AAEA,6B;;AAEA,4C;;AAEA,yE;AACA,yB;AACA,S;;AAEA,kD;AACA,0B;;AAEA,2D;;AAEA,0C;AACA,yD;AACA,4D;AACA,gC;AACA,mD;AACA,qC;AACA,6C;AACA,0J;;AAEA,mC;AACA,4C;AACA,+B;AACA,2B;AACA,6C;AACA,8B;AACA,kB;AACA,2B;AACA,uD;AACA,sE;AACA,kB;AACA,gE;AACA,mC;;AAEA,gC;AACA,gC;AACA,yC;AACA,qC;AACA,sB;AACA,wC;AACA,kC;AACA,2C;AACA,gC;AACA,wC;AACA,8C;AACA,wD;AACA,+B;AACA,yB;AACA,qB;AACA,kB;AACA,a;;AAEA,8B;;AAEA,U;;AAEA,wB;AACA,kE;AACA,kD;AACA,2B;AACA,oC;AACA,qB;AACA,mB;AACA,a;AACA,W;;AAEA,wB;;AAEA,K;;AAEA,Q;;AAEA,uC;;AAEA,C","sourcesContent":["Cordova = {};\n\nif (Meteor.isCordova) {\n\n    NotificationClient = function(options) {\n\n        if (!options || !options.gcmAuthorization || !options.senderId) {\n            throw new Meteor.Error('required_options', 'gcmAuthorization and senderId must be supplied as options as a minimum');\n        }\n\n        var instance = {};\n\n        var successHandler = options.successHandler || function(data) {\n            console.log(\"Success: \" + JSON.stringify(data));\n        };\n\n        var errorHandler = options.errorHandler || function(e) {\n            console.log(\"Error \" + e);\n        };\n\n        var messageHandler = options.messageHandler || function(payload, foreground, coldstart) {\n            if (!payload) return null;\n            if (foreground && !coldstart) {\n                navigator.notification.alert(\n                    payload.message,\n                    options.alertCallback,\n                    payload.title\n                );\n            } else {\n                window.plugin.notification.local.add(\n                    _.extend(options.notificationOptions, {\n                        message: payload.message,\n                        title: payload.title,\n                        autoCancel: true\n                    })\n                );\n            }\n        };\n\n        Cordova.onNotificationGCM = options.onNotificationGCM || function(res) {\n            if (res.event === 'registered') {\n                if (res.regid) {\n                    Meteor.call('cordova-notifications/updateRegid', res.regid, options.registeredCallback);\n                }\n            } else if (res.event === 'message') {\n                messageHandler(res.payload, res.foreground, res.coldstart);\n            }\n        }\n\n        Tracker.autorun(function(c) {\n\n            if (Meteor.user()) {\n                if (device.platform.toLowerCase() === 'android') {\n                    window.plugins.pushNotification.register(successHandler, errorHandler, {\n                        \"senderID\": options.senderId.toString(),\n                        \"ecb\": \"Cordova.onNotificationGCM\"\n                    });\n                } else {\n                    // TODO: APN HANDLER REGISTRATION HERE\n                }\n                c.stop();\n            }\n        });\n\n        return instance\n\n    }\n\n} else if (Meteor.isServer) {\n\n    NotificationClient = function(options) {\n\n        if (!options || !options.gcmAuthorization || !options.senderId) {\n            return false;\n        }\n\n        var Future = Npm.require('fibers/future'),\n            instance = {};\n\n        instance.sendNotification = function(users, data) {\n\n            if (typeof users === 'string')\n                users = Meteor.users.find(users).fetch();\n            else if (typeof users === \"object\" && users._id)\n                users = [users];\n            else if (users instanceof Mongo.Cursor)\n                users = users.fetch()\n            else if (!users instanceof Array)\n                throw new Meteor.Error('bad_users_argument', 'Supplied user(s) data is not one of: user id, user object, cursor, array of user objects.');\n\n            var regids = _.without(\n                    _.pluck(users, 'regid'),\n                    undefined),\n                payload = {\n                    registration_ids: regids,\n                    data: data\n                },\n                headers = {\n                    'Content-Type': 'application/json',\n                    'Authorization': 'key=' + options.gcmAuthorization\n                },\n                url = \"https://android.googleapis.com/gcm/send\",\n                fut = new Future();\n\n            if (regids.length) {\n                HTTP.post(url, {\n                        headers: headers,\n                        data: payload\n                    },\n                    function(err, res) {\n                        if (err) {\n                            fut.throw(err);\n                        } else {\n                            fut.return({\n                                response: res,\n                                userCount: regids.length\n                            });\n                        }\n                    }\n                );\n            }\n\n            return fut.wait();\n\n        };\n\n        Meteor.methods({\n            'cordova-notifications/updateRegid': function(regid) {\n                Meteor.users.update(this.userId, {\n                    $set: {\n                        regid: regid\n                    }\n                });\n            }\n        });\n\n        return instance;\n\n    }\n\n} else {\n\n    NotificationClient = function() {};\n\n}"]}